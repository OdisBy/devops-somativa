name: Continuous Integration

on:
  pull_request:
    branches: [main]

jobs:
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    outputs:
      image-tar: ${{ steps.save-image.outputs.image-tar }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (without push)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: user/app:latest
          load: true

      - name: Save Docker image to a tar file
        id: save-image
        run: |
          docker save -o app-image.tar user/app:latest
          echo "image-tar=app-image.tar" >> $GITHUB_OUTPUT

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: app-image.tar

  build-and-tests:
    name: Build Project and run tests on Docker
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: docker load -i app-image.tar

      - name: Create .env file from GitHub Secrets
        run: |
          cp .env.example .env
          echo "REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }}" >> .env
          echo "REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}" >> .env
          echo "REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }}" >> .env
          echo "REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }}" >> .env

      - name: Run tests inside Docker
        run: |
          docker run --rm user/app:latest npm test -- --ci --watchAll=false

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [build-docker, build-and-tests]
    if: always()
    steps:
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
